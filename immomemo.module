<?php



function immomemo_menu() {
    $items['test'] = array(
    	'page callback' => 'test',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['play'] = array(
    	'page callback' => 'play',
  		'type' => MENU_CALLBACK,
  		//'access callback' => 'immomemo_user_access',
  		'access callback' => true,
    );
    $items['play/upload_street'] = array(
    	'page callback' => 'upload_street',
  		'type' => MENU_CALLBACK,
  		//'access callback' => 'immomemo_user_access',
  		'access callback' => true,
    );
    $items['play/print'] = array(
    	'page callback' => 'CSV_print',
  		'type' => MENU_CALLBACK,
  		//'access callback' => 'immomemo_user_access',
  		'access callback' => true,
    );
    $items['ajax/get_CP'] = array(
    	'page callback' => 'get_CP',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['ajax/get_street'] = array(
    	'page callback' => 'get_street',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['ajax/get_buildings'] = array(
    	'page callback' => 'get_buildings',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['ajax/save_building'] = array(
    	'page callback' => 'save_building',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['ajax/get_habitants'] = array(
    	'page callback' => 'get_habitants',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );
    $items['ajax/save_habitants'] = array(
    	'page callback' => 'save_habitants',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );

    /*$items['ajax/walletMove'] = array(
    	'page callback' => 'walletMove',
  		'type' => MENU_CALLBACK,
  		'access callback' => 'immomemo_user_access',
    );*/
    return $items;
  }


function immomemo_user_access(){
	global $user;
	
	if($user->uid !== 0)
		return true;
	return false;
}

/**

Callback
*/

function test(){
	if ($test = false) {
		echo 'true';
		var_dump($test);
	}
	else{
		echo 'false';
		var_dump($test);
	}
}

function play(){
	global $user;
	//global $base_url;

	if($user->uid == 0){ // Not logged in
		//echo theme('immomemo_login');
		return theme('immomemo_login');
	}
	
	$CP = get_CP();
	require_once 'PHP/Mobile_Detect.php';
	$detect = new Mobile_Detect;


	if( $detect->isMobile() || $detect->isTablet()) {
 		echo theme('immomemo_mobile', array('CP'=>$CP));
	}
	else{
		//echo theme('immomemo_home', array('CP'=>$CP));  // PC ??
		echo theme('immomemo_mobile', array('CP'=>$CP)); // mobile
	}
}

function upload_street(){
	global $user;
	$table_building_name = $user->uid.'_immo_immeubles';
	$table_habitant_name = $user->uid.'_immo_habitants';

	if($user->uid == 0){ // Not logged in
		//echo theme('immomemo_login');
		return theme('immomemo_login');
	}

	$filename = 'sites/all/modules/immomemo/streets/Raspail_750145.csv';
	//$street = "Canettes";

	$im_id = '';
	$street_num = '0';
	$street_num2 = '';
	$result = "";
	$separator = ",";
	$poids = 0 ;
	//$row = 1;
	$genre = array(
		'0'=>'',
		'1'=>'M.& Mme',
		'2'=>'M.',
		'3'=>'Mme',
		'4'=>'Famille',
		'5'=>'Sté',
		'6'=>'SCI',
		'7'=>'Dr.',
		'8'=>'Me',
	);
	$type_voie = array(
		'0'=> '',
		'1'=>'rue',
		'2'=>'boulevard',
		'3'=>'place',
		'4'=>'impasse',
		'5'=>'quai',
	);

    if (($handle = fopen($filename, "r")) !== FALSE) {
        while (($data = fgetcsv($handle, 0, ";")) !== FALSE) {

        	if ($data[1] == 'Nom' || empty($data[1])) { // Ignore la 1ère ligne si nécessaire et les lignes vides qui séparent les immeubles
        		continue;
        	}

        	$street_num_temp = $data[3];
        	$street_num2_temp = $data[4];
        	if (($street_num != $street_num_temp) || ($street_num2 != $street_num2_temp)) { //Est-on passé à un autre immeuble ? (oui, on récupère l'im_id)
        		$query = db_query("SELECT im_id FROM {$table_building_name} WHERE nom='".$data[6]."' AND num=".intval($data[3])." AND num2='".utf8_encode($data[4])."'");
        		$im_id = $query->fetchField();
        		$street_num = $street_num_temp ;	
        		$street_num2 = $street_num2_temp ;

        		if (!$im_id) { // l'immeuble n'existe pas encore, il faut le créer				
					db_insert($table_building_name)
						->fields(array('num', 'num2', 'type_voie', 'nom', 'cp', 'bal','gardiens', 'tel_gardiens', 'code', 'infos'))
						->values(array('num'=>$data[3], 'num2'=>empty($data[4])?'':utf8_encode($data[4]),'type_voie'=> ($voie=array_search($data[5], $type_voie))?intval($voie):0,'nom'=>utf8_encode($data[6]), 'cp'=>$data[7], 'bal'=>($data[9]=='X')?1:0 , 'gardiens'=>empty($data[10])?'':utf8_encode($data[10]), 'tel_gardiens'=>empty($data[11])?'':utf8_encode($data[11]), 'code'=>empty($data[12])?'':utf8_encode($data[12]),'infos'=>utf8_encode($data[13])))
						->execute();
					$im_id = Database::getConnection()->lastInsertId();
					//var_dump($im_id);
        		}
        		$poids = 0 ; // On remet le poids des habitants à zero pour le nouvel immeuble
        	}
            
        	// On enregistre les habitants
        	db_insert($table_habitant_name)
        		->fields(array('im_id', 'genre', 'nom', 'prenom', 'poids'))
				->values(array('im_id'=>$im_id, 'genre'=>'1','nom'=>utf8_encode($data[1]), 'prenom'=>utf8_encode($data[2]), 'poids'=>intval($poids)))
				->execute();

            $poids++ ;
        }
        fclose($handle);
    }
    else{
    	echo 'Cannot open the file';
    	exit();
    }
    echo 'Finished !';
}

function get_CP(){
	// Va chercher, dans la table appartenant à l'UID, les codes postaux uniques et les renvoi en json.
	global $user;
	$table_name = $user->uid.'_immo_immeubles';
	$CP = array();

	$query = db_query("SELECT DISTINCT cp FROM {$table_name} ORDER BY cp ASC ");
	while ($data = $query->fetchAssoc()) {
		$CP[] = $data['cp'];
	}
	
	//echo json_encode($CP);
	return $CP;
}

function get_street(){
	if (is_numeric($_POST['CP']) && !empty($_POST['CP'])) {
		global $user;
		$table_name = $user->uid.'_immo_immeubles';
		$streets = array();

		$query = db_query("SELECT DISTINCT type_voie, nom FROM {$table_name} WHERE CP=".$_POST['CP']." ORDER BY nom ASC ");
		while ($data = $query->fetchAssoc()) {
			$streets[] = array('nom'=>$data['nom'], 'type_voie'=>$data['type_voie']);
		}
		
		//echo json_encode($CP);
		echo json_encode($streets);
	}
	else{
		echo 'erreur street';
	}
}

function get_buildings(){
	if (!empty($_POST['street'])) {
		$_POST['street'] = strip_tags($_POST['street']);
		global $user;
		$table_name = $user->uid.'_immo_immeubles';
		$buildings = array();

		$query = db_query("SELECT * FROM {$table_name} WHERE nom='".$_POST['street']."' ORDER BY num ASC ");
		while ($data = $query->fetchAssoc()) {
			$buildings[] = $data;
		}
		
		//echo json_encode($CP);
		echo json_encode($buildings);
	}
	else{
		echo 'erreur buildings';
	}
}

function save_building(){
	global $user;
	$table_name = $user->uid.'_immo_immeubles';

	// Sécuriser les data _POST
	//if (!empty($_POST['im_id']) && is_int($_POST['im_id'])) {
	if (!empty($_POST['im_id']) ) {
		$record['im_id'] = intval(strip_tags($_POST['im_id']));
	}
	else {
		echo 'DATA_NOT_SAVED - Problem on im_id';
		return;
	}
	if (!empty($_POST['gardiens'])) {
		$record['gardiens'] = str_replace(';', '-', strip_tags($_POST['gardiens']));
	}
	else{ $record['gardiens'] ='';}

	if ($_POST['bal'] == 0 || $_POST['bal'] == 1) {
		$record['bal'] = intval(strip_tags($_POST['bal']));
	}
	else{ $record['bal'] ='';}

	if (!empty($_POST['code'])) {
		$record['code'] = str_replace(';', '-', strip_tags($_POST['code']));
	}
	else{ $record['code'] ='';}

	if (!empty($_POST['infos'])) {
		$record['infos'] = str_replace(';', '-', strip_tags($_POST['infos']));
	}
	else{ $record['infos'] ='';}
	
	$update = db_update($table_name) 
		->fields(array(
		'im_id' => $record['im_id'],
		'gardiens' => $record['gardiens'],
		'bal'=> $record['bal'],
		'code'=> $record['code'],
		'infos'=> $record['infos'],
		))
		->condition('im_id', $record['im_id'], '=')
		->execute();
	
	if ($update == 1) { // Number of rows updated
		echo 'ok';
	}
	else{
		echo "DATA_NOT_SAVED - Problem on db_update for BUILDING.\r\rEtes-vous sûr d'avoir modifié les données ?\rCe message peut apparaitre si les données étaient déjà enregistrées !";
	}
}

function get_habitants(){

	if (!empty($_POST['im_id'])) {
		$_POST['im_id'] = strip_tags($_POST['im_id']);
		global $user;
		$table_name = $user->uid.'_immo_habitants';
		$habitants = array();

		$query = db_query("SELECT * FROM {$table_name} WHERE im_id='".$_POST['im_id']."' ORDER BY poids ASC ");
		while ($data = $query->fetchAssoc()) {
			$habitants[] = $data;
		}
		
		//echo json_encode($CP);
		echo json_encode($habitants);
	}
	else{
		echo 'erreur habitants';
	}
}

function save_habitants(){
	global $user;
	$table_name = $user->uid.'_immo_habitants';

	if (!empty($_POST['habitants'])) {
		$habitants = json_decode(strip_tags($_POST['habitants']));
	}

	// On réécrit $habitants en array avec les bon transtypages
	$array_delete = array();
	$array_save = array();
	foreach ($habitants as $habitant) {
		$array['id'] = isset($habitant->id) ? intval($habitant->id) : '' ;
		$array['im_id'] = intval($habitant->im_id);
		$array['genre'] = intval($habitant->genre);
		$array['nom'] = $habitant->nom;
		$array['prenom'] = $habitant->prenom;
		//$array['tel'] = intval($habitant->tel);
		$array['tel'] = $habitant->tel;
		$array['email'] = $habitant->email;
		$array['poids'] = intval($habitant->poids);
		
		/*if (!empty($array['id'])) {
			$array_delete[] = $array ;
		}*/

		$array_save[] = $array ;
	}




	// Pas une bonne solution: "Il faut effacer les habitants déjà enregistrés qui ont un id"
	/*foreach ($array_delete as $delete) {
		$query = db_delete($table_name);
		$query->condition('id', $delete['id']);
		$query->execute();
	}*/
	// -> On supprime tous les habitants d'un immeuble, avant de les réinsérer modifiés, en attendant une meilleure solution.
		$query = db_delete($table_name);
		$query->condition('im_id', $array_save[0]['im_id']);
		$query->execute();
	
	// Puis on enregistre les habitants reçus
	//$query = db_insert($table_name)->fields(array('id', 'im_id', 'genre', 'nom', 'prenom', 'tel', 'email', 'poids'));
	$query = db_insert($table_name)->fields(array('im_id', 'genre', 'nom', 'prenom', 'tel', 'email', 'poids'));
	foreach ($array_save as $record) {
	  	if ($record['id'] == 0 ) {
	  		$record['id'] = '';
	  	}
	  	$query->values($record);
	}
	$query->execute();

	//echo 'ok';
	//var_dump($array_delete);
	/*echo '<br>';
	var_dump($array_save);*/
	$_POST['im_id'] = $habitants[0]->im_id;
	get_habitants();
}

function CSV_print(){
	global $user;

	if($user->uid == 0){ // Not logged in
		//echo theme('immomemo_login');
		return theme('immomemo_login');
	}

	$street = strip_tags($_POST['street']); // la rue qui doit être imprimée
	$mode = intval($_POST['mode']); // le sens de distribution

	$email = $user->mail;
	$file = str_replace(' ','_',$street).'.csv';

	$table_name_building = $user->uid.'_immo_immeubles';
	$table_name_habitants = $user->uid.'_immo_habitants';

	$genre = array(
		'0'=>'',
		'1'=>'M.& Mme',
		'2'=>'M.',
		'3'=>'Mme',
		'4'=>'Famille',
		'5'=>'Sté',
		'6'=>'SCI',
		'7'=>'Dr.',
		'8'=>'Me',
	);
	$type_voie = array(
		'0'=> '',
		'1'=>'rue',
		'2'=>'boulevard',
		'3'=>'place',
		'4'=>'impasse',
		'5'=>'quai',
	);



	// on récupère tous les im_id
	$query = db_query("SELECT * FROM {$table_name_building} WHERE nom='".$street."' AND bal=1 ORDER BY num ASC ");
	while ($data = $query->fetchAssoc()) {
		$buildings[] = $data;
	}

	// on tri les numéro pairs et impairs
	for ($i=0; $i < count($buildings); $i++) { 
		if (intval($buildings[$i]['num']) %2 != 0) { //impair
			$im_id = intval($buildings[$i]['im_id']) ;
			$impair[$im_id] = $buildings[$i] ;
		}
		else{
			$im_id = intval($buildings[$i]['im_id']) ;
			$pair[$im_id] = $buildings[$i] ;
		}
	}

	// On tri les im_id en fonction de $mode
	$csv_array = array();
	$sep = ';' ;
	switch ($mode) {
		case 1:
			// On inverse $pair pour les besoin de distribution (mode 1)
			$pair = array_reverse($pair, true);

			// On récupère les habitants impair puis pair
			foreach ($impair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			foreach ($pair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			break;
		
		case 2:
			// On inverse $impair pour les besoin de distribution (mode 2)
			$impair = array_reverse($impair, true);

			// On récupère les habitants pair puis impair
			foreach ($pair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			foreach ($impair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			break;

		case 3:
			foreach ($buildings as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$value['im_id']."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			break;
		
		case 4:
			// On inverse $pair pour les besoin de distribution (mode 4)
			$pair = array_reverse($pair, true);

			// On récupère les habitants impair puis pair
			foreach ($pair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			foreach ($impair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			break;

		case 5:
			// On inverse $impair pour les besoin de distribution (mode 5)
			$impair = array_reverse($impair, true);

			// On récupère les habitants impair puis pair
			foreach ($impair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			foreach ($pair as $key => $value) {
				$query = db_query("SELECT * FROM {$table_name_habitants} WHERE im_id='".$key."' ORDER BY poids ASC ");
				while ($data = $query->fetchAssoc()) {
					$csv_array[] = $genre[$data['genre']].$sep.$data['prenom'].$sep.$data['nom'].$sep.$value['num'].$value['num2'].' '.$type_voie[$value['type_voie']].' '.$value['nom'].$sep.$value['cp'].$sep.'Paris'.$sep;
				}
			}
			break;
		
		default:
			break;
	}

	$csv_data = "Titre;Prenom;Nom;Addresse;Code Postal;Ville;\n";
	for ($i=(count($csv_array)-1); $i >0 ; $i--) {		
		$csv_data .= $csv_array[$i]."\n";
	}


	//***************
	// Sending Email
	//***************


	//$email_to 		= $email ;												// email address that vcards will be send to //
	$email_to 		= 'sdelacour@mytagg.org' ;
	$email_from 	= "Immomemo <no-reply@villagesaintgermain.fr>";			// from email address - can be same as above  //
	$email_subject 	= "Fichier d'impression envoyé par Immomemo: ".$street;
	$fileatt_type 	= "application/octet-stream";							// File Type
	$fileatt_name 	= $file ;
	
	$headers = "From: Immomemo <no-reply@villagesaintgermain.fr>";
	
	$message = "<br />--- Votre fichier d'adresses est en pièce-jointe. ---<br /><br />Vous remarquerez peut-être qu'il semble à l'envers.<br />Ne vous inquiétez pas, la machine de mise sous pli va tout remettre dans l'ordre !<br /><br />Bon mailing :)";
	
	$data = $csv_data;
	$data = chunk_split(base64_encode($data));
	$semi_rand = md5(time());
	$mime_boundary = "==Multipart_Boundary_x{$semi_rand}x";
	$headers .= "\nMIME-Version: 1.0\n" .
	"Content-Type: multipart/mixed;\n" .
	" boundary=\"{$mime_boundary}\"";
	$message .= "This is a multi-part message in MIME format.\n\n" .
	"--{$mime_boundary}\n" .
	"Content-Type:text/html; charset=\"iso-8859-1\"\n" .
	"Content-Transfer-Encoding: 7bit\n\n" .
	$message . "\n\n";
	$message .= "--{$mime_boundary}\n" .
	"Content-Type: {$fileatt_type};\n" .
	" name=\"{$fileatt_name}\"\n" .
	"Content-Transfer-Encoding: base64\n\n" .
	$data . "\n\n" .
	"--{$mime_boundary}--\n";
	
	@mail($email_to, $email_subject, $message, $headers);
}

/**

Themes
*/

function immomemo_theme($existing, $type, $theme, $path) {
	return array(
		'immomemo_home' => array(
			'template' => 'immomemo_templates/home',
			'arguments' => array(
				'CP' => array(),
				//'wallet' => array(),
			),
		),
		'immomemo_mobile' => array(
			'template' => 'immomemo_templates/mobilejquery',
			'arguments' => array(
				'CP' => array(),
				//'wallet' => array(),
			),
		),
		'immomemo_login' => array(
			'template' => 'immomemo_templates/login',
			'arguments' => array(
				//'CP' => array(),
				//'wallet' => array(),
			),
		),
	);
}

/**

Fonctions diverses
*/

